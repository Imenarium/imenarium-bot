import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, Text  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç
import asyncio
import pandas as pd
import random
from datetime import datetime, timedelta
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ Excel
try:
    df = pd.read_excel("scenario.xlsx")
except Exception as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å scenario.xlsx: {e}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
def get_greeting():
    hour = datetime.now().hour
    if 5 <= hour < 12:
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= hour < 18:
        return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 18 <= hour < 24:
        return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"

# –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã +8 –¥–Ω–µ–π
def get_date_plus_8():
    return (datetime.now() + timedelta(days=8)).strftime("%d.%m.%Y")

# –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
fallback_responses = [
    "{–∏–º—è}, –±–æ—é—Å—å, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤...\n–ù–æ –µ—Å–ª–∏ –≤—ã –Ω–∞–∂–º—ë—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ ‚Äî —è —Ç–æ—á–Ω–æ –≤–∞—Å —É—Å–ª—ã—à—É! ‚ú®",
    "{–∏–º—è}, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Å–∫–∞–∑–∞–ª–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ...\n–ù–æ, —É–≤—ã, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ—á–∫–∏ üòÖ\n–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —á—Ç–æ-–Ω–∏–±—É–¥—å –≤–º–µ—Å—Ç–µ?",
    "{–∏–º—è}, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–≤—ë–∑–¥–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏!\n–Ø, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Ç–µ–ª–µ–ø–∞—Ç. –ù–æ –∫–Ω–æ–ø–∫–∏ ‚Äî –º–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞ üöÄ",
    "{–∏–º—è}, –≤—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã!\n–ù–æ —è ‚Äî –Ω–µ –º–∞–≥, –Ω–µ –≤–æ–ª—à–µ–±–Ω–∏–∫, –∞ –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç...\n–ò –º–Ω–µ –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞—é—Ç –∫–Ω–æ–ø–∫–∏ üëá"
]

# –°–ª–æ–≤–∞—Ä—å –±–ª–æ–∫–æ–≤
blocks = {row['–ë–ª–æ–∫']: row for _, row in df.iterrows()}

# –ö–∞—Ä—Ç–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
keyword_map = {}
for _, row in df.iterrows():
    if pd.notna(row['–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞']):
        keys = [k.strip().lower() for k in str(row['–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞']).split(';')]
        for k in keys:
            keyword_map[k] = row['–ë–ª–æ–∫']

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=["start"]))
async def start_command(message: Message):
    await send_block(message, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Text)
async def handle_message(message: Message):
    user_input = message.text.strip()
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    lower_text = user_input.lower()
    for key, target_block in keyword_map.items():
        if key in lower_text:
            await send_block(message, target_block)
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
    for block_name, row in blocks.items():
        if pd.notna(row['–ö–Ω–æ–ø–∫–∏']):
            buttons = [b.strip() for b in str(row['–ö–Ω–æ–ø–∫–∏']).split('|')]
            transitions = [t.strip().lstrip('‚Üí').strip() for t in str(row['–ü–µ—Ä–µ—Ö–æ–¥—ã']).split('|')]
            if len(buttons) != len(transitions):
                logger.error(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –±–ª–æ–∫–µ {block_name}")
                continue
            button_map = dict(zip(buttons, transitions))
            if user_input in button_map:
                await send_block(message, button_map[user_input])
                return

    # –°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
    text = random.choice(fallback_responses).replace("{–∏–º—è}", user_name)
    await message.answer(text)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–ª–æ–∫–∞
async def send_block(message: Message, block_name: str):
    if block_name not in blocks:
        await message.answer("–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    row = blocks[block_name]
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ "–í–∏–¥–µ–æ"
        if block_name.lower() == "–≤–∏–¥–µ–æ":
            media_files = str(row['–ú–µ–¥–∏–∞']).split(';') if pd.notna(row['–ú–µ–¥–∏–∞']) else []
            captions = str(row['–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è']).split(';') if pd.notna(row['–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è']) else []
            for i, file in enumerate(media_files):
                file = file.strip()
                caption = captions[i].strip() if i < len(captions) else ""
                if os.path.exists(file):
                    try:
                        await message.answer_video(video=open(file, 'rb'), caption=caption)
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ {file}: {e}")
                        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {file}")
                else:
                    logger.error(f"–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {file}")
                    await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ)
        if pd.notna(row['–ú–µ–¥–∏–∞']):
            media_files = str(row['–ú–µ–¥–∏–∞']).split(';')
            for file in media_files:
                file = file.strip()
                if os.path.exists(file):
                    try:
                        await message.answer_photo(photo=open(file, 'rb'))
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ {file}: {e}")
                        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file}")
                else:
                    logger.error(f"–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {file}")
                    await message.answer(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        if pd.notna(row['–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è']):
            text = row['–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è']
            text = text.replace("{–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ}", get_greeting())
            text = text.replace("{–∏–º—è}", user_name)
            text = text.replace("{–¥–∞—Ç–∞+8}", get_date_plus_8())
            await message.answer(text)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        if pd.notna(row['–ö–Ω–æ–ø–∫–∏']) and pd.notna(row['–ü–µ—Ä–µ—Ö–æ–¥—ã']):
            buttons = [b.strip() for b in str(row['–ö–Ω–æ–ø–∫–∏']).split('|')]
            transitions = [t.strip().lstrip('‚Üí').strip() for t in str(row['–ü–µ—Ä–µ—Ö–æ–¥—ã']).split('|')]
            if len(buttons) != len(transitions):
                logger.error(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –±–ª–æ–∫–µ {block_name}")
                await message.answer("–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫.")
                return

            reply_buttons = []
            inline_buttons = []
            for btn_text, transition in zip(buttons, transitions):
                if transition.startswith("http") or transition.startswith("tel:") or transition.startswith("mailto:"):
                    inline_buttons.append([InlineKeyboardButton(text=btn_text, url=transition)])
                else:
                    reply_buttons.append(KeyboardButton(text=btn_text))

            # –û—Ç–ø—Ä–∞–≤–∫–∞ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if reply_buttons:
                markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
                markup.add(*reply_buttons)
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if inline_buttons:
                inline_markup = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
                await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=inline_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_block –¥–ª—è {block_name}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())