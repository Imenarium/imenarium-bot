import os
import re
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from openpyxl import load_workbook
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = os.getenv("BOT_TOKEN")  # –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
SCENARIO_PATH = "scenario.xlsx"
MEDIA_FOLDER = "data"

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# === –ú–ï–ù–Æ ===
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("–í –Ω–∞—á–∞–ª–æ"),
    KeyboardButton("–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥—É")
).add(
    KeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞"),
    KeyboardButton("–í —á–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
).add(
    KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç")
)

# === –ó–ê–ì–†–£–ó–ö–ê –°–¶–ï–ù–ê–†–ò–Ø ===
SCENARIO = {}
KEYWORDS = {}

def load_scenario():
    wb = load_workbook(SCENARIO_PATH)
    ws = wb.active
    for row in ws.iter_rows(min_row=2, values_only=True):
        block_id, text, buttons, transitions, keywords, media = row
        block = {
            "text": text,
            "buttons": [b.strip() for b in str(buttons).split('|')] if buttons else [],
            "transitions": [t.strip() for t in str(transitions).split('|')] if transitions else [],
            "media": media
        }
        SCENARIO[block_id] = block

        if keywords:
            for kw in str(keywords).split(','):
                KEYWORDS[kw.strip().lower()] = block_id

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def get_greeting():
    hour = datetime.now().hour
    if 5 <= hour < 12:
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= hour < 18:
        return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 18 <= hour < 24:
        return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"

def render_block(block_id, message):
    if block_id not in SCENARIO:
        return message.answer("–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω :(")
    block = SCENARIO[block_id]
    text = block["text"].replace("{–∏–º—è}", message.from_user.first_name)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for btn in block["buttons"]:
        keyboard.add(KeyboardButton(btn))

    if block["media"]:
        file_path = os.path.join(MEDIA_FOLDER, block["media"])
        if os.path.exists(file_path):
            return message.answer_photo(InputFile(file_path), caption=text, reply_markup=keyboard)
    return message.answer(text, reply_markup=keyboard)

# === –°–¢–ê–†–¢ ===
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    greet = get_greeting()
    await render_block("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", message)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
@dp.message_handler(lambda message: message.text in SCENARIO)
async def handle_exact_block(message: types.Message):
    await render_block(message.text, message)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í ===
@dp.message_handler(lambda message: message.text)
async def handle_keywords(message: types.Message):
    text = message.text.lower()
    for kw, block_id in KEYWORDS.items():
        if re.search(kw, text):
            return await render_block(block_id, message)

    await message.answer(f"{message.from_user.first_name}, –µ—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É ‚Äî —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤–Ω–∏–∑—É üëá", reply_markup=main_menu)

# === –ó–ê–ü–£–°–ö ===
if __name__ == '__main__':
    load_scenario()
    executor.start_polling(dp, skip_updates=True)
