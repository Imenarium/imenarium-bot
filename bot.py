
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold
from aiogram import F
import asyncio
import pandas as pd
import random
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ Excel
df = pd.read_excel("scenario.xlsx")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
API_TOKEN = "YOUR_BOT_TOKEN_HERE"
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
def get_greeting():
    hour = datetime.now().hour
    if 5 <= hour < 12:
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= hour < 18:
        return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 18 <= hour < 24:
        return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"

# –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
fallback_responses = [
    "{–∏–º—è}, –±–æ—é—Å—å, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤...\n–ù–æ –µ—Å–ª–∏ –≤—ã –Ω–∞–∂–º—ë—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ ‚Äî —è —Ç–æ—á–Ω–æ –≤–∞—Å —É—Å–ª—ã—à—É! ‚ú®",
    "{–∏–º—è}, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Å–∫–∞–∑–∞–ª–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ...\n–ù–æ, —É–≤—ã, —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ—á–∫–∏ üòÖ\n–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —á—Ç–æ-–Ω–∏–±—É–¥—å –≤–º–µ—Å—Ç–µ?",
    "{–∏–º—è}, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–≤—ë–∑–¥–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏!\n–Ø, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Ç–µ–ª–µ–ø–∞—Ç. –ù–æ –∫–Ω–æ–ø–∫–∏ ‚Äî –º–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞ üöÄ",
    "{–∏–º—è}, –≤—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã!\n–ù–æ —è ‚Äî –Ω–µ –º–∞–≥, –Ω–µ –≤–æ–ª—à–µ–±–Ω–∏–∫, –∞ –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç...\n–ò –º–Ω–µ –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞—é—Ç –∫–Ω–æ–ø–∫–∏ üëá"
]

# –°–ª–æ–≤–∞—Ä—å –±–ª–æ–∫–æ–≤
blocks = {row['–ë–ª–æ–∫']: row for _, row in df.iterrows()}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
keyword_map = {}
for _, row in df.iterrows():
    if pd.notna(row['–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞']):
        keys = [k.strip().lower() for k in str(row['–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞']).split(';')]
        for k in keys:
            keyword_map[k] = row['–ë–ª–æ–∫']

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.message(F.text)
async def handle_message(message: types.Message):
    user_input = message.text.strip()
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    lower_text = user_input.lower()
    for key, target_block in keyword_map.items():
        if key in lower_text:
            await send_block(message, target_block)
            return

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    for block_name, row in blocks.items():
        if pd.notna(row['–ö–Ω–æ–ø–∫–∏']):
            buttons = [b.strip() for b in str(row['–ö–Ω–æ–ø–∫–∏']).split('|')]
            transitions = [t.strip().lstrip('‚Üí').strip() for t in str(row['–ü–µ—Ä–µ—Ö–æ–¥—ã']).split('|')]
            button_map = dict(zip(buttons, transitions))
            if user_input in button_map:
                await send_block(message, button_map[user_input])
                return

    # 3. –ò–Ω–∞—á–µ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π fallback-–æ—Ç–≤–µ—Ç
    text = random.choice(fallback_responses).replace("{–∏–º—è}", user_name)
    await message.answer(text)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –±–ª–æ–∫–∞ –ø–æ –∏–º–µ–Ω–∏
async def send_block(message: types.Message, block_name: str):
    if block_name not in blocks:
        await message.answer("–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    row = blocks[block_name]

    # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –±–ª–æ–∫–∞ '–í–∏–¥–µ–æ'
    if block_name.lower() == "–≤–∏–¥–µ–æ":
        media_files = str(row['–ú–µ–¥–∏–∞']).split(';')
        captions = str(row['–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è']).split(';')
        for file, caption in zip(media_files, captions):
            await message.answer_video(open(file.strip(), 'rb'), caption=caption.strip())
    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if pd.notna(row['–ú–µ–¥–∏–∞']):
            media_files = str(row['–ú–µ–¥–∏–∞']).split(';')
            for file in media_files:
                await message.answer_photo(open(file.strip(), 'rb'))

        # –¢–µ–∫—Å—Ç
        if pd.notna(row['–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è']):
            text = row['–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è']
            text = text.replace("{–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ}", get_greeting())
            text = text.replace("{–∏–º—è}", message.from_user.first_name or "–¥—Ä—É–≥")
                text = text.replace("{–¥–∞—Ç–∞+8}", get_date_plus_8())
            await message.answer(text)

    # –ö–Ω–æ–ø–∫–∏
    if pd.notna(row['–ö–Ω–æ–ø–∫–∏']) and pd.notna(row['–ü–µ—Ä–µ—Ö–æ–¥—ã']):
        buttons = [b.strip() for b in str(row['–ö–Ω–æ–ø–∫–∏']).split('|')]
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(*[KeyboardButton(text=b) for b in buttons])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
